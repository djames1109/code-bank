// auto generated by: scim-sdk-schema-pojo-creator
package org.castle.djames.scimforge.api.resourcehandler;

import de.captaingoldfish.scim.sdk.common.constants.enums.SortOrder;
import de.captaingoldfish.scim.sdk.common.schemas.SchemaAttribute;
import de.captaingoldfish.scim.sdk.server.endpoints.Context;
import de.captaingoldfish.scim.sdk.server.endpoints.ResourceHandler;
import de.captaingoldfish.scim.sdk.server.filter.FilterNode;
import de.captaingoldfish.scim.sdk.server.response.PartialListResponse;
import lombok.RequiredArgsConstructor;
import org.castle.djames.scimforge.api.entity.AcgRole;
import org.castle.djames.scimforge.api.entity.User;
import org.castle.djames.scimforge.api.repository.UserRepository;
import org.castle.djames.scimforge.api.resources.UserResource;

import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
public class UserResourceHandler extends ResourceHandler<UserResource> {

    private final UserRepository userRepository;

    /**
     * {@inheritDoc}
     */
    @Override
    public UserResource createResource(UserResource resource, Context context) {
        return resource;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserResource getResource(String id,
                                    List<SchemaAttribute> attributes,
                                    List<SchemaAttribute> excludedAttributes,
                                    Context context) {

        return userRepository.findById(id).map(this::mapUserResource).orElse(null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public PartialListResponse<UserResource> listResources(long startIndex,
                                                           int count,
                                                           FilterNode filter,
                                                           SchemaAttribute sortBy,
                                                           SortOrder sortOrder,
                                                           List<SchemaAttribute> attributes,
                                                           List<SchemaAttribute> excludedAttributes,
                                                           Context context) {
        var users = userRepository.findAll();
        return PartialListResponse.<UserResource>builder()
                .resources(users.stream()
                        .map(this::mapUserResource)
                        .collect(Collectors.toList()))
                .totalResults(users.size()).build();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserResource updateResource(UserResource resource, Context context) {
        return resource;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void deleteResource(String id, Context context) {
        // TODO
    }

    private UserResource mapUserResource(User user) {
        return UserResource.builder()
                .id(user.getId())
                .userName(user.getId())
                .name(buildUserResourceName(user))
                .email(user.getEmail())
                .entitlements(user.getAcgRoleUserMapping().stream()
                        .map(a -> buildEntitlement(a.getAcgRole()))
                        .collect(Collectors.toList()))
                .build();
    }

    private UserResource.Name buildUserResourceName(User user) {
        return UserResource.Name.builder()
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .build();
    }

    private UserResource.Entitlements buildEntitlement(AcgRole acgRole) {
        return UserResource.Entitlements.builder()
                .appId(acgRole.getAppId())
                .appName(acgRole.getAppName())
                .value(buildEntitlementValue(acgRole))
                .build();
    }

    private String buildEntitlementValue(AcgRole acgRole) {
        return String.format("%s-%s-%s", acgRole.getAppId(), acgRole.getAccessGroup(), acgRole.getAccessGroupRole());
    }

}
